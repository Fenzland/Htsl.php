@extend( layout )

@section( title )
	HTSL for HTML5

@section( main )
	-article
		-h2
			HTSL for HTML5
		-p
			There are many predefined tags for HTML5. Those make code clear. First step, you need declare the doc-type and start -html tag.
		-code(htsl){>
			 HTML5
			 -html
		<}
		-h2
			Predefined Tags
		-h3
			 -meta, -equiv, -charset
		-p
			In HTML, we use <meta> to declare metadata, there are two way to use it <meta name="..." content="..." /> or <meta http-equiv="..." content="..." />, in HTSL, there are two different tag -meta and -equiv to do those things. In HTML5, there is a new useage, <meta charset="..." />, In HTSL, just use -charset tag.
		-code(htsl){>
			 -meta <keywords|Foo,Bar>
			 -equiv <set-cookie|cookies>
			 -charset(utf-8)
		<}
		-code(html){>
			 <meta name="keywords" content="Foo,Bar" />
			 <meta name="set-cookie" content="cookies" />
			 <meta charset="utf-8" />
		<}
		-h3
			links -link, -css, -shortcut, -icon, -js
		-p
			HTML use <link> tag or <script> tag with src property to link other file. In HTSL we use -css, -icon and -js to link CSS file, icon file and Javascript file, and use -link tag to link other kinds of files.
		-code(htsl){>
			 -css @demo.css
			 -js @demo.js
			 -shortcut  @favicon.ico
			 -icon(16x16) @demo.gif {type=image/gif;}
			 -link(help) @help.html
		<}
		-code(html){>
			 -css @demo.css
			 <link rel="stylesheet" type="text/css" href="demo.css" />
			 <script src="demo.js"></script>
			 <link rel="shortcut icon" type="image/x-icon" href="demo.css" />
			 <link rel="icon" sizes="16x16" type="image/gif" href="demo.gif" />
			 <link rel="help" href="help.html" />
		<}
		-h3
			 -a
		-p
			For HTML anchor tag <a>, HTSL provide @ for href > for target target <> for anchor name. When a tag has target property, the 'javascript' of @javascript:jscode... can be omitted, besides -a there are forms and -submit have this feature.
		-code(htsl){>
			 -a @http://htsl.fenzland.com
			 -a @/ >_blank
			 -a @:alert();
			 -a @#anchor_name
			 -a <anchor_name>
		<}
		-code(html){>
			 <a href="http://htsl.fenzland.com"></a>
			 <a href="/" target="_blank"></a>
			 <a href="javascript:alert();"></a>
			 <a href="#anchor_name"></a>
			 <a name="#anchor_name"></a>
		<}
		-p
			Here is '@' '>' '@:' useage of forms and -submit.
		-code(htsl){>
			 -post @/ >_blank
			 -get @:alert();
			 -submit @/ >_blank
			 -submit @:alert();
		<}
		-code(html){>
			 <form method="post" action="/" target="_blank"></form>
			 <form method="get" action="javascript:alert();"></form>
			 <button type="submit" formaction="/" formtarget="_blank"></button>
			 <button type="submit" formaction="javascript:alert();"></button>
		<}
		-h3
			Forms
		-p
			 HTSL provide several tags for different forms. The -post and the -get tags with different request methods. And the -upload tag for upload files. The -form is just an alias of the -post.
		-code(htsl){>
			 -post
			 -get
			 -upload
		<}
		-code(html){>
			 <form method="post"></form>
			 <form method="get"></form>
			 <form method="post" enctype="multipart/form-data"></form>
		<}
		-p
			 We use <> for name property of forms, use @ and > for action and target properties.
		-code(htsl){>
			 -form <form_name>
			 -form @/login >_blank
		<}
		-code(html){>
			 <form method="post" name="form_name"></form>
			 <form method="post" action="form_name" target="_blank"></form>
		<}
		-h3
			Fields
		-p
			Just like the <form>, the <input> into HTSL become several different tags. They are named as the type property of <input>, except the hidden fields which named -input. The -number, the -range and the -file have some parameters. The -number and the -range have 3 parameters which are min, step and max. The -file has a property named accept.
		-code(htsl){>
			 -input
			 -text
			 -search
			 -password
			 -email
			 -url
			 -tel
			 -number(0|1|100)
			 -range(0|0.1|1)
			 -radio
			 -checkbox
			 -date
			 -month
			 -week
			 -time
			 -datetime
			 -datetime
			 -color
			 -file(image/*)
		<}
		-code(html){>
			 <input type="hidden" />
			 <input type="text" />
			 <input type="search" />
			 <input type="password" />
			 <input type="email" />
			 <input type="url" />
			 <input type="tel" />
			 <input min="0" step="1" max="100" type="number" />
			 <input min="0" step="0.1" max="1" type="range" />
			 <input type="radio" />
			 <input type="checkbox" />
			 <input type="date" />
			 <input type="month" />
			 <input type="week" />
			 <input type="time" />
			 <input type="datetime" />
			 <input type="datetime" />
			 <input type="color" />
			 <input accept="image/*" type="file" />
		<}
		-p
			We use <name|value> to define their name and value, or <name|value|form> for their name, value and form. The -file specially not has value property, so it become <name> or <name|form>. If you just want to define name and form with out value, just use twe | and let it empty between them.
		-code(htsl){>
			 -color <bg_color|#6495ED>
			 -email <e-mail|uukoo@163.com|the_form>
			 -file(image/*) <logo|the_form>
			 -text <name||the_form>
		<}
		-code(html){>
			 <input type="email" name="e-mail" value="uukoo@163.com" />
			 <input type="color" name="bg_color" value="#6495ED" />
			 <input accept="*" type="file" name="logo" form="the_form" />
			 <input type="text" name="name" form="the_form" />
		<}
		-p
			 There are two fields tag not named input in HTML, they are <textarea> and <select>. But HTSL will treat them the same as other fields, value of -textarea instead of innerHTML, value of -select instead of selected of option (Currently, the Htsl.php has not achieved this feature, it will done in future).
		-code(htsl){>
			 -textarea
			 -select
		<}
		-code(html){>
			 <textarea></textarea>
			 <select></select>
		<}
		-p
			Some fields have placeholder, we use _ to define them.
		-code(htsl){>
			 -textarea _This is placeholder.&#10;Can you see?
			 -password _Watch the eyes behind you!
		<}
		-code(html){>
			 <textarea placeholder="This is placeholder.&#10;Can you see?"></textarea>
			 <input type="password" placeholder="Watch the eyes behind you!" />
		<}
		-h3
			Images
		-p
			 In the -img @ is for src, _ for alt just as placeholder, alt is the of place holder of image, right? Besides, the common attribute ^title is always use in -img.
		-code(htsl){>
			 -img @foo.jpg
			 -img @foo.jpg ^The title of image.
			 -img @foo.jpg _The alt of image.
		<}
		-code(html){>
			 <img src="foo.jpg" />
			 <img src="foo.jpg" title="The title of image" />
			 <img src="foo.jpg" alt="The alt of image" />
		<}

